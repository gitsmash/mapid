"""Initial migration with PostGIS support

Revision ID: 21e80d7c2588
Revises: 
Create Date: 2025-08-05 22:07:29.765669

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '21e80d7c2588'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Note: Removed PostGIS system table operations and non-existent tables
    # op.drop_table('spatial_ref_sys')  # PostGIS system table - don't drop
    # op.drop_table('post_comments')   # Table doesn't exist yet
    # op.drop_table('post_likes')      # Table doesn't exist yet
    with op.batch_alter_table('posts', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('category_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, dimension=2, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False))
        batch_op.add_column(sa.Column('city', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('state', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('is_featured', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('view_count', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('like_count', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('comment_count', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('category_data', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('photo_urls', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('deleted_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('is_deleted', sa.Boolean(), nullable=False))
        batch_op.alter_column('address',
               existing_type=sa.VARCHAR(length=300),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.create_index('idx_posts_active_expires', ['is_active', 'expires_at'], unique=False)
        batch_op.create_index('idx_posts_category_created', ['category_id', 'created_at'], unique=False)
        batch_op.create_index('idx_posts_location', ['location'], unique=False, postgresql_using='gist')
        batch_op.create_index('idx_posts_user_created', ['user_id', 'created_at'], unique=False)
        batch_op.drop_constraint(batch_op.f('posts_author_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'post_categories', ['category_id'], ['id'])
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])
        batch_op.drop_column('structured_data')
        batch_op.drop_column('views_count')
        batch_op.drop_column('longitude')
        batch_op.drop_column('post_type')
        batch_op.drop_column('images')
        batch_op.drop_column('comments_count')
        batch_op.drop_column('author_id')
        batch_op.drop_column('likes_count')
        batch_op.drop_column('latitude')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('email_verified', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('full_name', sa.String(length=100), nullable=False))
        batch_op.add_column(sa.Column('display_name', sa.String(length=50), nullable=False))
        batch_op.add_column(sa.Column('profile_picture_url', sa.String(length=255), nullable=True))
        batch_op.add_column(sa.Column('location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, dimension=2, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True))
        batch_op.add_column(sa.Column('city', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('state', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('country', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('location_updated_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('total_likes_received', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('total_posts_created', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('total_comments_made', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('total_help_provided', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('show_neighborhood', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('show_activity_stats', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('show_exact_location', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('is_verified', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('last_login_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('last_seen_at', sa.DateTime(), nullable=False))
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=False))
        batch_op.add_column(sa.Column('deleted_at', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('is_deleted', sa.Boolean(), nullable=False))
        batch_op.alter_column('location_verified',
               existing_type=sa.BOOLEAN(),
               nullable=False)
        batch_op.alter_column('reputation_score',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.create_index('idx_users_location', ['location'], unique=False, postgresql_using='gist')
        batch_op.drop_column('name')
        batch_op.drop_column('longitude')
        batch_op.drop_column('posts_count')
        batch_op.drop_column('last_active')
        batch_op.drop_column('latitude')
        batch_op.drop_column('profile_picture')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('profile_picture', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('last_active', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('posts_count', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
        batch_op.drop_index('idx_users_location', postgresql_using='gist')
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.alter_column('reputation_score',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('location_verified',
               existing_type=sa.BOOLEAN(),
               nullable=True)
        batch_op.drop_column('is_deleted')
        batch_op.drop_column('deleted_at')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('last_seen_at')
        batch_op.drop_column('last_login_at')
        batch_op.drop_column('is_verified')
        batch_op.drop_column('is_active')
        batch_op.drop_column('show_exact_location')
        batch_op.drop_column('show_activity_stats')
        batch_op.drop_column('show_neighborhood')
        batch_op.drop_column('total_help_provided')
        batch_op.drop_column('total_comments_made')
        batch_op.drop_column('total_posts_created')
        batch_op.drop_column('total_likes_received')
        batch_op.drop_column('location_updated_at')
        batch_op.drop_column('country')
        batch_op.drop_column('state')
        batch_op.drop_column('city')
        batch_op.drop_column('location')
        batch_op.drop_column('profile_picture_url')
        batch_op.drop_column('display_name')
        batch_op.drop_column('full_name')
        batch_op.drop_column('email_verified')

    with op.batch_alter_table('posts', schema=None) as batch_op:
        batch_op.add_column(sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('likes_count', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('author_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('comments_count', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('images', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('post_type', postgresql.ENUM('GARAGE_SALE', 'RESTAURANT', 'HELP_NEEDED', 'FOR_SALE', 'SHOP_SALE', 'BORROW', name='posttype'), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('views_count', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('structured_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('posts_author_id_fkey'), 'users', ['author_id'], ['id'])
        batch_op.drop_index('idx_posts_user_created')
        batch_op.drop_index('idx_posts_location', postgresql_using='gist')
        batch_op.drop_index('idx_posts_category_created')
        batch_op.drop_index('idx_posts_active_expires')
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.alter_column('is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
        batch_op.alter_column('address',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=300),
               existing_nullable=True)
        batch_op.drop_column('is_deleted')
        batch_op.drop_column('deleted_at')
        batch_op.drop_column('photo_urls')
        batch_op.drop_column('category_data')
        batch_op.drop_column('comment_count')
        batch_op.drop_column('like_count')
        batch_op.drop_column('view_count')
        batch_op.drop_column('is_featured')
        batch_op.drop_column('state')
        batch_op.drop_column('city')
        batch_op.drop_column('location')
        batch_op.drop_column('category_id')
        batch_op.drop_column('user_id')

    op.create_table('post_likes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], name=op.f('post_likes_post_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('post_likes_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('post_likes_pkey')),
    sa.UniqueConstraint('user_id', 'post_id', name=op.f('_user_post_like'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('post_comments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], name=op.f('post_comments_post_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('post_comments_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('post_comments_pkey'))
    )
    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('srid > 0 AND srid <= 998999', name=op.f('spatial_ref_sys_srid_check')),
    sa.PrimaryKeyConstraint('srid', name=op.f('spatial_ref_sys_pkey'))
    )
    # ### end Alembic commands ###