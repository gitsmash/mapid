[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mapid"
version = "0.1.0"
description = "Location-based community platform for neighborhood connections"
authors = [
    {name = "Mapid Team", email = "hello@mapid.app"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["flask", "geospatial", "community", "neighborhood"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Framework :: Flask",
]

dependencies = [
    # Core Flask framework
    "flask>=3.0.0",
    "flask-sqlalchemy>=3.1.0",
    "flask-migrate>=4.0.0",
    "flask-login>=0.6.0",
    "flask-wtf>=1.2.0",
    "wtforms>=3.1.0",
    "flask-cors>=4.0.0",
    # Database and ORM
    "psycopg2-binary>=2.9.0",
    "geoalchemy2>=0.14.0",
    "alembic>=1.12.0",
    # Geospatial libraries
    "shapely>=2.0.0",
    "pyproj>=3.6.0",
    "geojson>=3.1.0",
    # Authentication
    "authlib>=1.2.0",
    "requests>=2.31.0",
    # AWS S3 integration
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    # Utilities
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "gunicorn>=21.2.0",
    "redis>=5.0.0",
    # Image processing
    "pillow>=10.0.0",
    # Content moderation
    "better-profanity>=0.7.0",
    "geopy>=2.4.1",
]

[project.optional-dependencies]
dev = [
    # Testing framework
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-asyncio>=0.21.0",
    "pytest-postgresql>=5.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-env>=1.0.0",
    "pytest-mock>=3.11.0",
    "factory-boy>=3.3.0",
    "httpx>=0.25.0",
    "freezegun>=1.2.0",
    "faker>=20.0.0",
    
    # Code quality
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "vulture>=2.10.0",
    "interrogate>=1.5.0",
    "radon>=6.0.0",
    "pre-commit>=3.5.0",
    
    # Development tools
    "ipython>=8.17.0",
    "ipdb>=0.13.0",
    "flask-debugtoolbar>=0.14.0",
]

[project.urls]
Homepage = "https://mapid.app"
Documentation = "https://docs.mapid.app"
Repository = "https://github.com/mapid/mapid"
Issues = "https://github.com/mapid/mapid/issues"

[project.scripts]
mapid = "app.cli:main"

# Hatch build configuration
[tool.hatch.build.targets.wheel]
packages = ["app"]

# Tool configurations
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=app --cov-report=term-missing --cov-report=html --strict-markers -ra"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "geospatial: Tests requiring PostGIS",
    "oauth: Tests requiring OAuth mocking",
    "slow: Slow running tests",
    "benchmark: Performance benchmark tests",
    "security: Security-focused tests"
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/migrations/*",
    "*/venv/*", 
    "*/tests/*",
    "*/conftest.py",
    "app/__init__.py"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:"
]
fail_under = 85

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = ["E", "F", "W", "C90", "I", "N", "B", "S", "A", "COM", "PT"]
ignore = ["E501", "S101"]  # Line length handled by formatter, allow asserts in tests

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["S101", "S106"]  # Allow asserts and hardcoded passwords in tests
"app/config.py" = ["S105", "S106"]  # Allow hardcoded secrets in config (will be env vars)

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
plugins = ["sqlalchemy.ext.mypy.plugin"]

# Bandit configuration
[tool.bandit]
skips = ["B101"]  # Skip assert_used test
exclude_dirs = ["tests"]

# Interrogate configuration
[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
fail-under = 80
exclude = ["setup.py", "docs", "build"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 2
quiet = false
whitelist-regex = []
color = true

[dependency-groups]
dev = [
    "ruff>=0.12.7",
]